# Azure DevOps azure-pipelines.yml

trigger:
- azure

stages:

- stage: Debugging
  steps:
  - script: pwd
  steps:
  - script: ls

# Start the OWASP ModSecurity Core Rule Set and Pixi with its DB with docker-compose
# OWASP ModSecurity Core Rule Set Container (Apache Reverse Proxy)
# owasp/modsecurity-crs
# See https://coreruleset.org/
# ModSecurity Tuning:
# See https://www.netnea.com/cms/apache-tutorial-8_handling-false-positives-modsecurity-core-rule-set/
- stage: StartContainers
  jobs:
  - job: BuildJob
    steps:
      - task: DockerCompose@0
        displayName: Start Pixi and CRS
        inputs:
          containerregistrytype: 'Container Registry'
          dockerComposeFile: '**/docker-compose.yaml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'up -d'

# Application Tests with Testcafe
# skip-js-errors because of: Uncaught Error: Bootstrap tooltips require Tether
- stage: RunTestcafeTests
  jobs:
  - job: RunsInContainer
    container: # inline container specification
      image: testcafe/testcafe
      options: --volume testcafe/tests:/tests --rm chromium:headless --no-sandbox --skip-js-errors

    

#- stage: Analyze Logs
#  jobs:
#  - job: BuildJob
#    steps:


#- stage: Test
#  jobs:
#  - job: TestOnWindows
#    steps:
#    - script: echo Testing on Windows!
#  - job: TestOnLinux
#    steps:
#    - script: echo Testing on Linux!
#- stage: Deploy
#  jobs:
#  - job: Deploy
#    steps:
#    - script: echo Deploying the code!


# Debugging possibilities
#- name: 'ubuntu'
#  args: [ "touch", "foo" ]
#- name: 'ubuntu'
#  args: [ "ls", "-l", "/workspace/testcafe/tests" ]
#- name: 'ubuntu'
#  args: [ "pwd" ]
# Debugging with curl
#- name: 'curlimages/curl:7.69.0'
#  args: [ "-v", "http://172.17.0.1:8000/register"]
#- name: 'curlimages/curl:7.69.0'
#  args: [ "-v", "http://172.17.0.1:8080/register"]


# ModSecurity Log Analysis:
# Fail if ModSecurity log is not empty
# Show ModSecurity logs of Testcafe Tests
# If not empty -> Repair your application OR
#              -> ModSecurity Tuning:
# See https://www.netnea.com/cms/apache-tutorial-8_handling-false-positives-modsecurity-core-rule-set/ OR
#              -> GitHub issue: https://github.com/SpiderLabs/owasp-modsecurity-crs
#- id: 'Fail if ModSecurity log is not empty'
#  name: 'gcr.io/cloud-builders/docker'
#  args: [ 'exec', 'crs', 'cat /var/log/apache2/error.log | grep ModSecurity | grep error | grep -vi "MyEvilWAFTest" | grep -v "949110" | grep -vi "980130" && exit 1 || exit 0' ]

# Fail if ModSecurity log does not contain WAF Test String "MyEvilWAFTest"
# That means CRS is not working properly or test was aborted.
#- id: 'Fail if ModSecurity log does not contain WAF Test String'
#  name: 'gcr.io/cloud-builders/docker'
#  args: [ "exec", "crs", 'cat /var/log/apache2/error.log | grep  -q MyEvilWAFTest' ]

# Debugging docker
#- id: 'Docker'
#  name: 'gcr.io/cloud-builders/docker'
#  args: [ "ps" ]
# Show ModSecurity Full Logs:
#- id: 'Show ModSecurity logs'
#  name: 'gcr.io/cloud-builders/docker'
#  args: [ "exec", "crs", "cat", "/var/log/apache2/error.log", "|", "grep", "ModSecurity" ]
#  args: [ "exec", "crs", 'cat /var/log/apache2/error.log | grep  ModSecurity | grep msg' ]
